4. Написание acceptance тестов (TDD).

В прошлом шаге мы занимались разработкой внешнего интерфейса
нашего решения (то как наше решение будет видно клиенту, то
как клиент сможет с ним взаимодействовать).

Если внешний интерфейс разработан, мы можем создать acceptance тесты
для нашего будущего решения! Да, именно acceptance тесты!

Оказывается писать тесты можно и до написания самого кода!

Это одна из практик Test Driven Design (TDD).

Во-первых, тесты сами по себе очень хорошее дело.

Во-вторых, в задании сказано, что наше решение должно быть протестировано.

В третьих, acceptance тесты это одни из самых эффективных тестов.

В четвёртых, написание тестов до написания самого решения (кода),
который они будут тестировать - это самый эффективный способ создания
тестов!

Почему писать тесты до создания кода - это круто?

Что бы понять это нужно разобраться в том что должен делать сам тест.

Тест должен тестировать! Ну что тут не понятного!

А что тестировать? Что он должен проверять?

Тест должен проверять правильно ли работает код!

А что означает правильно работающий код?

Правильно работающий код - это код, который выполняет предъявленные
к нему бизнес требования! Этот момент очень важен!

Мы не пишем код просто так! Мы хотим, чтобы код делал что-то
полезное. Мы предъявляем (выдвигаем, формулируем) к нему требования.

Самые лучшие требования это те, которые называются БИЗНЕС ТРЕБОВАНИЯ.

Бизнес требования пришли от бизнеса, они демонстрируют ожидания
бизнеса от нашего ИТ решения. Бизнес требования диктуют ожидания
клиентов от нашего ИТ решения. Бизнес хочет, чтобы наше решение
выполняло те или иные правила, эти правила становятся бизнес
требованиями к нашему решению.

Если наше решение следует выдвинутым к нему бизнес требованиям,
значит клиент будет доволен. А если нет, то клиент будет считать,
что решение содержит ошибки.

Лучше всего бизнес требования к системе можно зафиксировать и
протестировать при помощи acceptance тестов.

Суть acceptance тестов заключается в следующем. Мы тестируем
всю систему целиком. Во время тестов мы становимся на сторону
клиента и тестируем нашу систему именно с позиции клиента.
Во время написания acceptance тестов для нас система это чёрный
ящик. Мы незнаем (не хотим знать) как система решает задачу
внутри себя, из каких элементов она состоит. Для нас важно что мы
подаём системе на вход в качестве входных параметров и какой
результат получаем на выходе.

Так как мы тестируем систему со стороны клиента (не зная о ее
внутренней реализации) то при формировании тест кейсов мы можем
оперировать только БИЗНЕС ТРЕБОВАНИЯМИ выдвинутыми к системе!

При написании acceptance тестов мы превращаем бизнес требования
взятые из документации или описания задачи в тест кейсы
(в программный код)! Каждый наш тестовый сценарий проверяет
правильность работы одного бизнес требования!

Мы превращаем бизнес требования из документации в программный код!
Этот программный код будет неустанно следить за выполнением бизнес
требований в процессе всего цикла разработки и поддержки ИТ решения!

И это действительно круто!

Ваша задача: написать тестовые сценарии на основе бизнес требований
и превратить их в acceptance тесты используя библиотеку JUnit.
