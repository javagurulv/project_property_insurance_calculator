После того как программист погрузился в предметную область
задачи и проанализировал ее, задал все уточняющие вопросы
по самой задаче и разобрался как ее можно решить с точки
зрения бизнеса, можно переходить ко второму этапу.

2. Проектирование данных (доменной модели задачи).

Как вы уже знаете любое ИТ решение состоит из двух частей:
- данные
- алгоритмы.

Данные представляют информацию с которой работают алгоритмы.

Для создания алгоритмов программы нужно чётко понимать и
представлять те данные (информацию), которую они будут обрабатывать.

Поэтому обычно работу над задачей начинают с проектирования
данных (другими словами с разработки доменной модели задачи).

Под разработкой доменной модели понимается ее создание в
таком виде, в котором с ней можно будет работать внутри программы.

Что это значит?

Это значит, что должен быть создан программный код для
представления всех важных для задачи данных внутри программы.

В высказывании выше есть две ключевые фразы:
- важных для задачи данных;
- представление данных внутри программы.

Важных для задачи означает, что модель данных должна уметь
представлять не все данные во всем мире, а только данные которые
используются в задаче. Данные не относящиеся к задаче, не должны
присутствовать в модели данных.

Представление данных внутри программы - означает, что должен быть
создан программный код, с помощью которого можно будет представлять
данные внутри программы.

Для создания хорошей модели данных нужно из описания задачи выделить
сущности, которые там упоминаются. Сущности в тексте описываются
существительными. Перед тем как читать дальше, попробуйте выделить
те сущности о которых на ваш взгляд идёт реч в описании задачи.


У нас получился следующий список:
страховой полис
объект страхования
под объект страхования

Далее нужно понять какими свойствами обладают (описываются)
данные сущности в рамках наше задачи.

Перед тем как читать дальше попробуйте расписать свойства
каждой сущности.


У нас получился следующее:

Страховой полис:
    - номер (текст)
    - статус (перечисление)
    - список объектов страхования (список объектов)

Объект страхования:
    - имя (текст)
    - список под объектов страхования (список под объектов)

Под объект страхования:
    - имя (текст)
    - страховая сумма (????)
    - тип риска (перечисление)


Следующий этап разработки доменной модели состоит в том, чтобы
понять как выявленные сущности связаны между собой. Проще говоря
как они друг с другом связаны?

Почему так важно понять как связаны между собой сущности?
Да потому что сущности сами по себе не могут существовать.
В рамках решаемой задачи сущности всегда как то друг с другом
связаны. Для построения правильной модели данных нам надо
понимать связи между сущностями.

Тут стоит упомянуть какие типы связей вообще бывают:
- один к одному
- один ко многим
- много ко многим

Для общего развития найдите в интернете более подробное описание
каждого типа связей, ознакомьтесь с ним, а для тренировки и закрепления
темы попробуйте привести примеры сущностей и связей между ними из
вашей реальной жизни.


Проанализировав связи между сущностями нашей задачи у нас получилось
следующая картина:
- полис может содержать много объектов страхования;
- каждый объект страхования может содержать много под объектов.

Полис - 1 ко многим - объекты страхования.
Объект страхования - 1 ко многим - под объекты.

Пример полиса:

Полис -> дом       -> (tv, computer, fridge)
      -> квартира  -> (tv, fridge)


После того как мы выяснили с какими сущностями в программе мы
имеем дело, прояснили какие у них есть свойства и как они связаны
друг с другом мы готовы перейти к разработке программного кода
для представления нашей доменной модели.

Напоминаю, что наша задача заключается в создании программного
кода для представления данных в программе.

Сущности с их свойствами внутри программы можно представить
в виде объектов и описать классами.

Ваша задача, попробуйте создать модель данных для задачи
в виде программного кода.

PS: наш вариант решения вы найдёте в следующих этапах.