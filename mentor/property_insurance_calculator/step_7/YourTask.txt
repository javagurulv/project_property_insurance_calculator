Перед тем как показать наш код доменной модели давайте обсудим
какой тип данных используется для представления денег в Java.

Первое, что приходит на ум это конечно тип данных double или float.

PS: если вы встречаетесь с новой концепцией в ИТ и вам кажется, что
надо делать именно так, использовать именно этот подход и так далее.
Остановитесь на секунду и задайте себе вопрос: а не сталкивался ли
с этим кто-то другой, не является ли это стандартной вещью, которую
уже точно кто-то использовал и нашел для неё решение? Попробуйте
сформулировать более общий вопрос о вашей концепции:
- как представить сумму страхования в Java? (это частный вопрос)
- как представить деньги в Java? (это более общий вопрос)
Используя более общий вопрос вы сможете в интернете быстрее найти
более корректные и чёткие ответы. Бегло ознакомьтесь с ними, в
некоторых случаях вы точно будете удивлены! Помните: вы можете
ошибаться даже в самых простых вещах!

PS: использование double или float для представления денег в Java
покажет то, что вы не знаете элементарных вещей о вещественных
типах данных (double и float) и с вами точно не продолжат общение
и не примут на работу!

В Java (и во многих других языках программирования)
для представления денег обычно не используют типы
с плавающей запятой (double или float). Это связано
с проблемами точности и округления, которые могут возникнуть
при использовании типов с плавающей точкой в финансовых расчетах.

Основные причины, по которым не рекомендуется использовать
double или float для представления денежных значений:

1. **Потеря точности**: Типы с плавающей точкой не могут
представить некоторые числа точно из-за их двоичной природы.
Это может привести к потере точности при выполнении арифметических
операций, особенно при округлении до двух знаков после запятой.

2. **Проблемы с округлением**: В финансовых расчетах важно точно
округлять денежные значения. При использовании типов с плавающей
точкой округление может быть непредсказуемым из-за ошибок округления.

3. **Подход к представлению денег**: В финансовых расчетах обычно
используются фиксированные точности и представление денежных сумм
в целочисленных значениях (например, в копейках, центах или
других наименьших денежных единицах).

Вместо double или float для представления денег в Java
рекомендуется использовать целочисленные типы данных,
такие как int или long, и представлять денежные суммы
в наименьших денежных единицах (например, копейках).
Это позволяет избежать проблем с точностью и округлением,
обеспечивая надежные и предсказуемые результаты финансовых операций.

Кроме того, в Java есть классы, такие как BigDecimal,
которые предоставляют высокую точность и контроль над
округлением и позволяют более точно работать с денежными значениями.
BigDecimal используется для точных денежных расчетов, когда
необходимо избежать ошибок округления и обеспечить точность
до определенного числа знаков после запятой.

Ваша задача: познакомиться с типом данных BigDecimal.
Изучить как
- создавать объекты этого типа
- выполнять арифметические операции
- округлять значение до нужной точности
- использовать константы этого типа (ZERO, ONE, TEN).

Для поиска информации воспользуйтесь любым источником в интернете.

Совет: при изучении новых классов не просто читайте теорию в
интернете, но и попробуйте выполнить действия на практическом
примере. Для этого в коде приложения создайте класс
(например BigDecimalPractice) и внутри его метода main()
поэкспериментируйте с изучаемыми концепциями на реальных примерах
(желательно из своей жизни). Практика позволит вам лучше понять
и усвоить изучаемый материал. Так же в качестве эксперимента
можете использовать тесты, сразу проверяя правильность результатов.